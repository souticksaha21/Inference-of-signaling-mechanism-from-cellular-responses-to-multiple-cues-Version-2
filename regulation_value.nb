(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    109746,       2148]
NotebookOptionsPosition[    108671,       2120]
NotebookOutlinePosition[    109066,       2136]
CellTagsIndexPosition[    109023,       2133]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Minimal regulation network for value antagonism", "Title",
 CellChangeTimes->{{3.85878758738841*^9, 3.8587876215747547`*^9}, {
   3.858787710443191*^9, 3.858787762329831*^9}, {3.858787802162438*^9, 
   3.8587878732186537`*^9}, {3.858787919988308*^9, 3.8587879217740707`*^9}, {
   3.858788141462962*^9, 3.858788199963662*^9}, 
   3.858788246944161*^9},ExpressionUUID->"505a6abf-d10e-4706-91b9-\
a51540dd6d2d"],

Cell[CellGroupData[{

Cell["\<\
In this code we extract minimal networks with nedges that shows value \
antagonism using regulation. The most general network looks like -\
\>", "Subsubsection",
 CellChangeTimes->{{3.85878825550604*^9, 
  3.8587882978930893`*^9}},ExpressionUUID->"7adbfba8-31d6-485e-ac7b-\
7f7ffabb5893"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Qe4nVWVPnBHZ/4zo86MI4ogoDTpCihVijQVBKVIBykivRcFAekQCAkB
EkroLdSEFiCELjX0jvTeIr139z+/zez45XBub+eeu97n+XJv7vnOd85X9t7v
Wutda830++1X2+zLX/rSl3b+j0n/rLbxrkvvtNPGf/7tNyb9Z43tdt5y8+02
/cMK2+2y6eab7rTI778y6Y+f/cuXvrTQpP3/ddLvKRAIBAKBQCAQCAQCgUAg
EAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgE
AoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFA
IBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAI
BAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKB
QCAQCAQCgW7AP/7xj/TZZ5+lTz/9NH388cfpo48+Sh9++GH+6f+ffPJJft1+
rR3Dft7jOPYPBAJto4y/Mn6MvTL+/K2Mp5bGX3m/sWqzf2tjNRAIBJod5s83
3ngjPfXUU+nuu+9ON9xwQ7ruuuvyz3vuuSc9/vjj6e9//3t69913686Z/ua1
hx9+ON12223pySefTG+++WYfnU0g0H9gLL333nvp5Zdfnjx+rr322vTXv/41
TZgwIT3wwAPp2WefTa+//nrmOvXsBX83Pu+888503333pRdffDF98MEHfXA2
gUAg0PswL5rzXnjhhcxhzJ9jx45No0aNSiNGjEgHHHBA2nXXXdMuu+ySf/r/
EUcckU455ZR0wQUXZL5z//335/ebj/GZ5557Ll1//fXp2GOPTYMGDUqjR49O
f/vb3/r6VAOBhgP/yzvvvJNthVtvvTVdddVVacyYMemkk05KQ4YMSXvttVfa
eeed0x//+Me05557pkMOOSQdc8wx6cwzz0yXXXZZ5jqPPfZYevXVV/PYcyzc
56KLLkoHH3xw3veaa65JEydO7OtTDQQCgV4BP/VLL72ULrnkkjx/rrTSSmn+
+edPs846a/re976Xpp122vSd73xn8vbd7343zTDDDGnmmWdOCyywQFpllVXS
Pvvsk7nQ008/nX0848aNS1tssUVaYokl0o9//OP8u+MHAoEp8fbbb2dOM3Lk
yLTJJpukxRdfPM0999xpxhlnTNNNN12aZpppJo89v/vb97///TTHHHPk8bXp
ppumo48+OvMb48+x/H/11VdPP/rRj9IKK6yQbZGHHnqor081EAgEehzmwSuu
uCLbhRtttFFaeOGF00wzzZS+/e1vp6mmmirPoT/4wQ/y/IjrzDfffGn22WfP
fMc+5tlZZpklLbnkkmn99ddPf/7zn7N9udlmm2U+g/94fd111802aCAQ+Bzv
v/9+jhGdffbZaffdd08rr7xyHmfG1Le+9a009dRTZ/4y55xz5rFn++EPf5jt
DbaF8efnvPPOm371q1+lrbbaKu2xxx55/LE1jFPHWmyxxdJuu+2WPysQCASa
FXw09C6XXnpp+tOf/pTtPlzlv//7v9M3v/nNNP300+c5dOmll852HzuSzwVf
WXvttdMvf/nL7KvBecytbEnv8X/v8/PrX/96+upXv5r/7hjnnHNOX592INAQ
wGlozk444YS04YYbZu5iDP3P//xPtifYAgsuuGDmK2wCY8/G9lhttdXSz372
szzO8B7+VPyFf4cPB88xJo09Y9Bx+GHvvffevj7tQCAQ6DG88sorWf+C0+An
5lTz4H/+539mnwzfy2GHHZZtSf4cmhuaYZv4P13Ncccdl2P+7Ex+c/bl1772
tcyNzKdf+cpX0r//+79nXvPb3/42eE0g8H+ghzG21lprrcxF/uu//iv9x3/8
R+YoSy21VNphhx3S8ccfnzUyV1999eSxR8s2fvz4rK3hYxWDsj+b5H//93/z
uPvGN76Rj/Wv//qveUwb3zvttFPW+wcCgUCzgoZ3v/32S8suu2z2eeMf5kO+
6z/84Q+Zs9AwPvHEE1lviAfRJdrkWcjHoE2kWzzyyCOzH4e/27FwI5zmS1/6
Uvp//+//5VhW8JpA4J8wbvhf5plnnuyjwUH4XPhhaIPFbI0v+nvjrYw949B4
LBpjY4q2zfiaa6658rH+7d/+LX35y1/OW/CaQCAwUMBXI8ZkLjWn/su//EvW
1ZgfTzzxxByLp2eUq1EPcqjkkppn6RHPP//8tOOOO2ZfjziWOTV4TSBQH4cf
fniOPfFtsgFs+IcxxD9Ke99SDjcYl3Kf5G/fdNNNWXO8xhpr5PiVMWc8B68J
BAIDCebO2WabLc97hYPQDB900EGZ87AJaXDaqvtV6tzwq8vlFsdfaKGFsu/H
3Bq8JhD4IvhYjJHCQfhYxKTkdj/66KNZ+9ZaHctS81J9BtxGnRo1GdZZZ50c
kyrjOnhNIBAYKKAX5qsx95lX8Zqf//znOeb/yCOP5PmyvfVJzb/q1jz44IP5
/RtssEGOZ7FBg9cEAl+E/CTjo4w942S77bbL2rXXXnst2xTtBdvCe+hv1Lah
tyljO3hNIBAYKFBLRp6oObVsv/71r7MfR0y/pfhTS8CB+G3U5xs8eHD6xS9+
kefq4DWBwBehvmV17NG3ydG+/fbbc1099bo7Avs///zzeVxvvfXWWbcTvCYQ
CAwk1OM1yy23XK4xrHa7PNSO9pMpPnFaGzrikuMRvCYQmBK1vAb/33bbbdOV
V16Z9cF8MB2BsfrWW2+lu+66K8ejaOdwJfmJwWsCgcBAQD1eQxejLqmcbr1p
WtPX1EPpCcXm3H///XN+N11k5HkHAlOiltfQ16y55ppZsy8OXPQ1HRl/xqs8
RblWakzJ+2ZbBK8JBAIDAfV4jRpf6pSy9+SQ6qvXEbvRHGxulYOq9gaepD4Y
XiNX49xzz+3BMwoE+g9qeQ2tjfrc22yzTa4NxWdKs9aadrgWxh+dDQ2xvCoa
NzX+oi5fIBAYCKjHa9S+MBeqf6qvpR7C6tzw3bAfxZnq9e6uwjxsf7rk3//+
9+mnP/1p+slPfpK23HLL/LdAIPBFXkM/rDamut9qXZ5xxhm5j7d8b7UU+EHZ
GG3xHPupOaWmFBtFXwY1iw888MDoOxsIBJoa9XgNnaE4v/pearXvu+++eX6V
961GjX7dYvi0N+ZYvhn6Ylyn+Myrcf6jjjoq10Plq9HTW52NQCDwRV5Txp+6
lossskgeN2rcXHzxxTmuq+eC+nw0xera1Bt7UGpKiUXJJTf26IhPPvnkzJEC
gUCgWVGP15RaXmLyes3wtehNo5cl/w1NMZ8L/Y25Vu6TmBOtMH+OOdX86icO
dPPNN2dedMwxx0yuNRYIBOrzGuOP1lddS7aFnMLNN988a9XEdc8777w8jtgH
7Ab+F31r8R1+msJzxK/EsS6//PI89vRc4PsRVw4EAoFmBX7C713qZ9RudIzq
hulfid+stNJKab311svxJLU3+F+OPvroPGeOGzcuz5tq87EVcRxz6EsvvZRr
2piDn3nmmezHCQQCn9evqdaOqt30IjE+S+9ZuvuNN944bb/99rlf99ChQ7PG
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
Ohf+GveiP3PJtuD6ujauCW2Ma7/++utnHY26OK6HGnz8MXLMPZP8Nddee23+
XRyMPo8/Rx4BHbM+Cn09hgKBQKAR0dO8Bo+Rb2TOpqfQC9T/u8On316I34nl
2djitajNhaax7a/w3duqPVi78XF0B1xb8RX6MbWXxFNoXQvEf/jJaND0N7jm
mmsyp+lObtWI4KcRa3O+csTVCeejkReJp/BbGW8lR2CjjTbK9R/8pLmjXZZD
UHIl5Z/z9wQCgcBABj8/LsF+tpX6qnzi9JHi9lVeI4ZPPyl/qFqP1Xsdp70+
eroANrn8EzVF5NzSTtMvdEeeentQ1QazlevVzq/12fTXumd9wWuKn4ZeZa+9
9sp1l+Ra6zXPR6POi31cU3oxfgi59F3V4DY6Sk67OJtzxuVWXnnlHItT46r0
55Zvjtvw26i1UzZ+GTX51IbAf4xPeeh8O+yDQCAQGKgodTKsX2JBtA7ya238
3NYiueWF15hD55lnnpyrJSej7Gvz3tK3rz3aH+sa+1RdM30l9M1il9Ky1POd
9ARoZqrrOB9BFTQMtbWI++t6q1Z1RziN+9DVmrliSPwRfDR8EO5x6WMmp6/4
56ARtVY9BePDM47v8VeqqYmjuC7GWbXng7HR0ub1UkMZ91HTxrgKBAKBgQpr
iniTOjpiA2L1YgU2saaVVlop6x3YjuZRuk615/m+aRvLvuJV4vryaflb2qp1
bF73mWxU87ljm9N9pr59uFbZz9oqh6wnQHdZXcvlzeNo1lg67dp6w/15zXBP
XMd6W1Vfo76cv5V70FHgJUXXXvq0uq5ye9Syc5/5IXBmz15v+eYaCc5Z/Sp9
G2iJ+F7KGCucpiObcUmToz65PO9AIBAYqOBboWtQz3SFFVbItTJoEM21pc+D
uL0cFfOun2JR4vnqaYgrlP3VC2N70qe2ZueXnBiaArV4fKY+VzY10/iOytpI
90Inya6Vl8If1J0xCseSU1vPV1HPh0EH0ozoaj6U+0UvRY+E1+IrVZ+bmKY8
HbV9+fs8a/gTjU3x1wwkuFZHH310rkejfjB/S2f4TLVH+Y9+9KPsF4t+3oFA
YCDD/KpHsBwMGhe9Z/hj/MRd/M6fIoe01HAvPanE88X+xZHK73qTq/XSnjiS
fFpchU7HWjpo0KC8HhZ9jriWWBifDj3GHnvskfmNPJ7uzHGn6xBfaisuo3ZJ
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
h+Xcp9Z4Df3wWb85JT17w1N9Pn/Jx1T3ecUVV+wwp1EvXfxhoOZz0pVUOQv9
dLXfOh9gbQ54M8K4Mq+o1yMmKb/J+Kqtg1R8NOx5z408PLkDfd3bvad4DdDM
vP385/WsLt3mwjR42v3r2j3+dtS8w9L5G5yTnr/tuX6VC17tMep+ikmr81nN
ea2HjqxFjs8mZYfpW+r4zVIPKtB1mHvLPKt+eXtQ6uuX/sRtQQ8mPEFdbZ8n
F0kMvq9zG0s9Md8LlxEDtrEbxaI6HRub9JaHzr0vjV5rVDps5kGtcpqsP5xk
mx31w8PS/Wfdk95/9b0+vS74iPlCPwsaG7Xt28Nr1CQWg6IZHqg1Rl23ah8F
28iRI3MfstoYla0/9JfvCuiJrDeuwVZbbZV7i8mXE5PwrPz85z/PfcP0pHWN
rIONkCPWk7wG1BhXs+quE25Lxy8yIg353oF1P0f+JG7z0Oj7s/6ur22enkZ7
1yK9OzxT9XIN9S5pxthuoP3Qt676TLSH17A/2VUd4TVqkunNLcZjrZTvIAew
r+2yAmPBXEuzyHaUZ+ocxQg6XGdk0unIa7rxkOvSkT8YnA7+zr5t8pqcGzXD
Aen6/a9OL93xQp/bZu6JGivrr79+jg+0Rxvh3tImqd0ykMHP3lYvb9ull17a
EM9+T8M5GkP0Mngc/sJPpS6z/pjilcZZX8adatHTvKaApm7cVhdmm6aleYGW
eMLhN6RXH5zY1M9Le9ci+f9tjS21Xtsbewg0D9jketPwSbSX15h38ORau7M1
XmM+mzhxYrZhxdjF0dXdWnTRRXMftEYZp/KfxILZC9ZzdeD11eyM3+Gjtz7M
9Usv3ZaPeb82tTXVnFH+nftOvSt90gA6Qf40a5A+lmoz/8///M8X6uK7n6Ve
s/6hNIG9ofdsdIjD0b7Wm3PxZT6MRlrHewOlzrhez8aWTY02c1Gj1SjsLV4z
8d6X0q3DbkzHLTqixXlhyPcPTON3uiTXtmmEOhBtwXxp7rAuWF+sF/irGFS9
ubQjaxE9A79/bS2F2vfa2NKBgQGxTly2JZ5b71miAcRBav3r7eE15jJzuF6/
tBfqWbDrl1xyydw7pxnx1jNvpAfOuDudtcqpU8yDh896SN38h2oehDoaV+9+
eXr/tffTPxqgHyaOosaKOAEfG221en16Yerdre6QWjfylWlHmrlXd2fg+XcN
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
LbLIIulXv/pV9m/RMrkfno/21mtwbM+euh0LLrhg5qHqeKor4zgd4ZXtXYvs
d/zxx0+xrxxb81YgAD3Na8zRaroZR4XXGE/yNpspB++xSx9OZ610SjpitsGT
56rxf7wkTbznxeyjqeLNp99I955yZxr165Nb5TWDpt4nnfizY9Lj4x9J77/S
s74teSR6E6or/Ic//CHHDqu8xZynzpa5Sz0+95CNVmBNxxvWW2+9XLfPtsYa
a2R7sKyjpV6XubXso9afPi/VOcl6J5+Xf6/sp/aF56Ws7X7iy+V19b+22GKL
zEnAvOx3x9aHyD40pbvsskv+DgXy1fWP1qOoHGvbbbfN36FaN5lvW16x59g+
6mWLqZZ13fnTEcg79rp6HWuuuWbWsBauYR9aSpqR8lmrr756tpdxkgLH3Wyz
zXIMpuynnqr1v3AN42rrrbfOOSdeX2KJJdKOO+6YeRyUepjOzXexzzLLLJOv
Gd99Af40dOjQXDutfJa+y/hLVZ8it4SvtRzL77hdWbesb3q40/h63XPimlb7
enqeLrnkkvy9y2fJczKXqGNeoE7z7373u6wDbkkn3FZPjznmmCPPZZ3tld4W
r6GBGzrDQZmfXLrZBS1uY38/Jl2w3jnpjOVPSscvelQaMe9hWSPM31OtQ+54
w+ceks5Z5bSs0XvupqfTOy++nXU4XYF7iHdsuummmevJvVYftfT31dNNHXg+
Ls/2RhttlJ8Pz097fDeeAfO7Op2O9W//9m+5Xo1cfJy9I70M2rMW4b+1tfzk
j3dFSxVoPvQ0r2HTWRNo+dhf1paybjZDvX35Sh+8/n66Y+SENHzOIXm+Ynfx
tdw6/Kb0wWvvfaGWFr3M3+97OY3d8vxs97WW820evHnwdZPsthda+AbdA+v/
rLPOmr7xjW9kfiOPsmprW1f19VKLQl6KOay6ZrmX5kP3V28Fm7Vtzz33nMyP
6PjUGLFmlX3MhwcddFC2/wvwDjakHJiyn7WWzwJHKPH86nGsgWIP5lLAa/x+
4IEH5j7S9plmmmnyOuo7FFjXfUfPZjnWqquumq688sopYvSHHHJImmWWWabo
BcLnXeZ+PMOajfN5XT0yHFGd7RJv5avQEw3fK59lLRET4NsowBedv7pmZT99
t/heig/NNV155ZXz2lR6WeBRRVOC97HRnZvvYh81MV0zNkWBfXAdfKV8Fm7q
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
baXWHv90dW4rfWj8zf222Ucdi6oNzQaXa+O1sl/J+6+uS/5mPi37sA2rtQF8
Lluy7OMnzlatWVL2kdtUjmOfksdR4D2OXz1W7TpZaoLUnlvZp975298+1e9t
n9rzL/0Cq8eqPX/nUNWilXMrr5fzr8YJ7d+e87dP9fxLH43q+Zea/NXzr+YB
l/N3bq2dv+PWnn+tzs53s0/1/H3v6ncueTjV71N7/p1Fb/Ia+uGX7ng+Xbv3
Fa3Wsjrqh4eli353bnr6urb7eXp25CeK3xVfbHvHudqLfGFqBtT2sGxJVx4I
DESU/kFiH3I7aTXYXjhNqTPfXyDf+oZJdtPJS4/8p653oSPTpVtekK7ebVzW
13R00x/z7JVPnaIPQ704++GzHpIu3ebC9O7Edzrts5Er0plcCX42NUXF1tV8
4WsTGyj5wO4xzsTOo6WyqceoFoy80wL5t/Kf5VyX/UodvLImmTvl/8rdlvPL
1ydmWa2p43mSE603jGPYV90/dcIKrHWeM89d+SycrjaP23EcX26offx0nJLn
bn732Xi4130n51ZqzgMeJBeVP6t8lrxq+1RrN1svnL+87LKffXDFwv98Ll+E
OmReV+NG7ZfSk8L64vzlTbs29pE/zYdRrXFHP+v86fXLZ7G3+U+redyeCedP
P24fuei1/aacm3Mu38fvVX0FjuHcaFzKZ6lJTR9TjV2qYSVv3fNTjlX6dpR1
1LnJv3dO5Xr73qXWW9EV8yGUz3I8588X2VX0Jq8xjulmbhx8XbaPWhr/at2c
ssTI9OjYv7V5TNcHt/H86cfRkRqHcgY8mzhlcJhAoG2Ik1svrCnFhjMGrQ39
ITfKHPTM9U+lc1Y7LdfQwjXMcXKazDfPTLKlnr/lmQ5v/NC3HXFTOnGJo1vt
q8Cfc+aqp6Znb3gq18PoDOQ/qeeq/mxnfNRqs9Fpyp3ily71Kkp9GmuMudSm
vi+OUK31on6Keilqp5X99H+yHpV1yzpqLTPHqt3m+9JVlDpb5ls8Q409tqVj
6D2grow1swCfwGPk1JTPkrOKR1VrpjiO46+wwgp5H7WLcQ/2f/FD+Gx17bzu
O/n+eEf5zqU+DQ1I+Sw6eWtzte4eLuL89T0o++Fk9CGFRxgf8lFo0NRj4Vuj
3S4x28KzxBpcG8dQT1Fs0bkV4CL4kNyY8ln0njhjtZ6w4zh//Qvso2+V56Rw
P2MVP3I/ve77+B03LcAznD/OWz6L/gXfqNYRUeNEfo2eVPaRM4wjuf+F17lv
6uWIo9jHNZBDWfKK7ef+lXXbppacXAR5l11Fb/OaV/82idcccm2rvCb3Wljk
6PTIRQ+1fdD/QxmPnme1JOkaa3Pmaepo6OjsaOiMV89rZ2s1BwIDHaWHoTnR
PF31azccaPze+jA9eN59uR46TsNvPHz2IbknAi1vtm/+kTq8ffL+J+mNJ19P
564zqtVYVImzTxhyfZp4b+f6hlqv1TxX77UzvKbMhWrc6s9Y6p9Z362X1lCv
29T4tR5Xey2y3633tD1lP2uq3Iuyjlq31WaXo8WHLg9DXlbJK3Wd9Z/BGdRu
L7lb1tvqWss3gB+pfVs+Cyfhmyi1ecFx9D3gj7IPX7zjWEdxLM8oHYc6caVO
ivPn5y/fmW8Ip1DbsHyWeCuuxa9QQB8iHqsubtnPNbIGldxAfha9nNR+LXo0
51Dq8uIZzl/OivigY7DJcZxqHWi+G9yTXqJ8Fq7If1ON//Khur5iFvahD+Xj
Kv4hn8cP53563ffxu/oyBXiS88d3ymeJW6oZWK2FyA+DE9Jr2cdaS+Pq/pe1
lP2Dpzincr3x1uL3sZ/7RzNcPkueDl5G295V9Hoc6vbn07V7tR6Hkjdwxi9O
TI9f1v5ac8YRu4P/Df/3XFdzHot2zrWjB3bPS4+xQCDQcZgH2XfsCXMfO1IN
2/b2ki2wr7HrWOogq7divjVXsgvZdGw4+3Ql5vWPTz9LL9z6XLpu3yuzHoY+
eOhMB+WaoQ+efW/bB2j12P9I77/6Xrp2zyvScQsOb5XbHDH7oencVU9Pj4/r
XC3N7uA1NusaPlJ4jTW5ymvswwbkK6nHa9QbKceqx2scB68p/Zasu7hFvl7/
x2v4S/Aax8BJ8Bq2f0HhNXoalM9qidc4vnnfPvob1fIaz6br5vW2eE35LHnJ
/EP1eA37uexXj9e4RnhNWftb4zWOobdFS7yGf60aZ2iJ17Db7cOXV4/XuJ9e
933q8RrnhteUz5JXU4/X6FWB15R1VZ3ierzGOZUYaD1ew6dTPkved3/kNR+/
+1Hu/3bhRue0qhs+er7Dc4/wZ298uu2D/h+K3ei5cW/El+jjjC02iTwA197f
jV3PVDU+GQgE2oeiP+OP57On1zBfsm2tQXzW7dH+lTFrDhR74P82F1p7zLns
YXUYzId82OIRYgnWoc7o+NlV9516ZzpvzTPSId/dL/d1GT7P0HTTwddl3V9X
IS/i/jPuTmPWPatVf/TgafdPw2cbku48/rbcV6Gtusa1sD7x25d1paMaG2ut
uhh82655WWv42vhT5IO6B/oJyXnDM93rAvEMc6n7Yh+bfgrW4LKuuz9iNZ4N
PhI1j8RtSg8A9966LH7Cd+4YehzhR9V1ja6HJgbXKJ9V6pxU13VruOOrPWYf
/g16Ds+Kz/I8+myxN6/7TmJW+ED5zmJWuI91o3yW2JAYWzUOh+Pg8Nbgsh9+
4vyLv5L/Ei/XY8u15EsS0ylcDO/z/XF2ubyOgbtZq6pxOGND7RH5/OWzaKtw
22r/K719nL/6+fbBD+mESh4vXoNTup9e933c/2r/JxzQ+Zc+mjaxJmO6qvnB
cfV7Flsqx6LrsU8Z97gyzuicyvX2vUvPKnEo54+Pls/yTG+++eZ5fe4qeq1+
zSef5drkNxxwTTp5qZGt5keKUd8yeJJ9dl/n/LTuIZ+qvlk0b+YB9p7n2n0O
LU0g0HkU+9eciMuUenDsTnMlrUGxE9s6jhi7NcF8y5cqFiFmwU9ejsmOt4bj
OHhU1S5sNyYNeTlIV+02Lo2Ye2j2p9iOW3RErpWn/0tXYY5Tf/j6g67JdXBa
1A/rJTzJrrtmz/F5jst1+joAHMMa0dFapCX+YK3hE8Ef8JiiLzFvuh/6+/AH
2Io+vKobtZ5a29ntZT/Hcc+LvsIc63viol7HX+hoq5oQdiUOTCtqHzoSmhA+
muo+NLL8KOWz6tmljuP4jlGO5TjFd4hH+Gx8wOtnnnnm5HMr39m+YqnW9vJZ
6qrYp9ozxz7On6an7Gcf5180Z55P+5Tz93nOofiGfCffH093bexDM+38q3EE
6xW+oEd6+Sy8Aj+q9lt2HOeP39kHp6PNKeOkjDXnXO6H36t9yO3r3GiAy2fh
WMZbdTzjLDQ2np9ybniffYq94dz49ZxT2cf3ruqY7WNNLp/leM6/qlHvLHqL
16hd89JdL6TRk2yZod8/qNV+KurX0OG99VznasYUe9I1xMVdPz/9v9F1jYFA
o8P4Mn+zmeV689Xw+9OjWm/Zie3xhapVbD5j97fleygaBba9foTm7I7EpD58
44M0cRKHGLP+WXlOwy2GzzUknb/+2enle1/sUj2ZAvocsaj7z7onHT3vsPw5
relsxL/uP/3u/J6OwJpmnWCTd6TPL44orkCbya/tGlrry1pc+vr4m7XVZo1h
Y1evtd+t814r+3mPdbHqR/M3n+F135l9XuWjPtc6T0trH/tae6t9gUoenvW2
fJbfPV/V3GPHcXyfUz6vmldceojbp/bcyj4l79i5lX2s4bXnX/apnr99qvFX
x7JP9fx979p8eedWvnM5/+rYKedPh1s+C8e0T3Uts0/1/F3T6j7l3pbvbD+/
V/sD2dc+eGv5LMfEV6r3DZ+yT7lvjlX2Kefv3HzPcv7le1e/j318fnnd8Zx/
d9Qv72leI6b90TsfpievfjzbSscueGSLsWeaG31UrvrzuNx3oad63wYCga7D
XMtGlPMhrsGPzF40V5m/zMnmQPNrybct8DtbmH9dPZz2rs1Fp8Cuq/rhC/hM
9G3iA+GfEfs2j9Do3nPSHenkZf+Z233S4seka3cbn155YOKkOeqjvL+afZ99
3IEYFxvq439+pu2JKx5Lp//8xHT4LPV74ZXtuIWGpyt2uiS99sgrn3/2+1Nu
LfWRcT2tA2LsdJn0DW1dN/vQL4jnsOXDZx1oBrAl2CRizJ9++M/t9cdfS9ft
eWU6ecmW+nlP4jXzH5kmHHbjFO+rv33yf+P7kzyffPjWB+mdF9/Ovtlr/jI+
HT7zwS3qhXN/qFkOTpdsNiY9csGDHY45BwKB3gWugtvwNatzwVfOPsNnrJvs
QfFfvn9+evZZ6QPMthO3l1Mjh6MjsRTxFxoQOuMpoBbay29P4ikvp+dufDrX
3nvi8kfS3867L/1136vSGSucNEXf3WPmOzxdsO456a6Rt6bHx/4tPT3J9pLX
kPscfNo+bmO+06N74r0vpudueDpvd59wezrnN6flfjGt8Zoh3zsw98ujyZFf
Xt5fNnNn3c+cxBnxRfxE3jK+0pbfho5UrM+96m91FAOBlsBmefOp13P9mFce
nDh5e+qqx9PlW1+cjl9oRN2xd8g0+6Wj5x6Wrtl9/BTvq7tNmk/YRS/c+mx6
etJxH5g0XulpzlvnzOynwWlaqu1gvhk1ad7525j7Px/PQWsCgYYHroK/2Pj9
cZoSA+bLUY+DzpPOVEyf5sGabH/5s7Q0HYml2Ph35DTy91TBFnr+5mfSnZN4
Ct/w5TtcnPvRyVM4ddnjcvy72sdJn90TFjkqjV57VLpk8zF5/5sH/zXnKfHb
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
B5qGPeXUyanJsJuzRYsWRX8ns+eTvRGbbLJJOvTQQ6Ou88Ybb4S2sV7T+Hzy
ySdFdUzh/Dd5klJ/8PNDf4ndKuSPr7nmmtXuV1lqqaVC8+y0006xV+V3v/td
7FXRcyMiUj/wO5l+xamnnprWX3/9sneUsx/iyCOPTJMmTXKevYIg/3HKlClF
6zZ4Pczjqz845/l+0gO8++6707777hu6pZxduNRtWrdunW677bbwfOtZExGp
H/id+sADD6Rddtkl+kzlaBqOZZddNvpV11xzTfSg1DWVBa8JGofXl+waPFBS
v6BFXnnllTRkyJDUvn37tNpqq5WlabLa5/LLL59OOumkyCSn5ikiIosOdfB+
/fqlNm3alK1psv1XK6ywQngh33nnnZi/Ya8iv+e//PLLxv5viTQo9F2pdVIH
69y5c1p55ZVr9b4g60nRj8JLzGOJiMiig/93n332CU9AbX4nZ8cBBxyQxo4d
G+9ZL7vssnTllVeGvqE+YA1HmirUV5gfxJOGX6bc/m1hzYZ+7imnnGJ/UESk
nqAHxc5xauh10TWbbbZZ6tatW9puu+3i77/4xS/Cz/GnP/3J3DdpstDjQ78f
dNBB4ZUpt/+UP/icFVdcMWbByYwSEZFFB13ToUOHtOqqq9ZJ16y11lpp2223
jfes/J6mtt6rV6/IwWH2WKQpQn2FXOdLL7007bzzzmmZZZapk65h9vDoo49W
14iI1BMPPvhgzKauvvrqddI16667bngm8RdkH6OvxTyxPhtpyuCxIbOG+e7q
8mpK6Rp+buhl2YcSEakfXnzxxXTuuedGD6m23oDlllsuHXLIIenOO+9Me+21
V2rXrl38jmbmlT0M5sVLUwb/GJmUzM9vs802kVlZW9/wjjvumK666ipzEkVE
6okPPvggMvaZ864uS6zYgaZBC+ETZqcC894XX3xx7JEiRzXzDGd7FvQQy5IO
Ov3rr7+OLEoyn6ixcG6/+uqroec33XTTWr0vYM6b7G50ke8BRETqB3LcqaXT
48c7XO5cB76aE088MXQMv9u/+uqr9MUXX4SnJp+VQpYq+4nMT5ElHXZZsl+U
DEv2IOAbxj+MR579sOTylatrmAlnBhGPPVnF5vKJiNQPeASopVOzOfbYY9M6
66wTmXs1/U4mJ7VHjx7hOeZ3MlCPyWoyPCa7o2bOnBn7F6npkG9jrV2WVDi3
n3zyydhl2bZt27TDDjtEph4/A2+++Wb0Xa+77rq0++67h2emuvko3jfw80XP
9pxzzomfEX4urGeKiNQf6BDq69TD999//7T55punVVZZJWY1yN7jYB6Vman1
1lsvdmOiV6rzBaOTyOe78MILYwdgq1at4n0ptXv3SMmSBucs9UZ2dJNjQP8I
3cJ89/nnn59eeumlyDRgR/fQoUPjnF977bXjZwYNw6wUn4O3mPcN7L3s27dv
3N85KBGRhoHfy+TtU1u//fbb0+mnn566du2a9t5778hT7d69e/iL2VeM17im
fJrnn38+/eY3v0lbb711vHdFF+ErJpuVvpTaRpYkOM/ps5I7ucEGG4RW4UDj
o++5Lat7slP0qaeeSldffXXkOlHbIcsb/xr10EGDBkUWJh4d7m9/VkSk4aAW
zu9n6ir4CNAwd9xxRxwjRoyImfBZs2aVnN9mNwP+A/pV+Ah4v8rcB7/ryYtX
18iSBNqDvio9p9NOOy16TWQjHHbYYZHTlPfF45Ohr8TOJ/bComvYo8a+hP79
+0cvi58f/TQiIo0Hv4PxBM+dOzd8wpmnpjrwDj/99NORV0Yvixo8fpwxY8ZY
r5ElFnaJ/vnPf04jR45Mt9xyS+j8Tz75ZKH7oXHo6aJ/2JOAtmcG/Oyzz47+
rD4zEZHGg97UCy+8EDPcaJMuXbqke+65J2rv/J4vBu9fmR/HU4PH5qKLLgo9
xMfQSHokZUmh0A+fzQ/iEybPoHBfJec+9Rh8NnhsyENA1+CtGThwYOggd3eL
iDQe1GjIptl+++3DJ0lPqZw9Cfy+J2eebA8eI5+niq8AnzK1G+vxUolwXqJh
5s2bF/5e/GTl1FnQNdR0hg0bFr1X/Dj4cNg1gheHnwvPeRGRxoH3qY899lh4
hvndzIwqcyBkqzIHUqwGn8F7W96XkjfGkfWeeExmvvEZ8H7XmrxUIugP+q3n
nXde+GTI0EbjlKo1cjt1TM7tJ554Ivw4hx56aOyRYm7KHqyISOPC3AZzTHhl
yO3j/Se5Hffdd1/k7ZUDv+uz3hSeBK4Vxx13XNSBmK2yLyWVBhqGHWf4g/G/
k7nH+Yo2od5YCmqR9HCZjcJrg5eef4uISONCzYU9CeSR4YNkBoS5EHJWq/PX
FIJuoS7D+1feu2644YbhJ6Y2f+ONN8Zt5T6WSEPD+co84EEHHRR1ymxHJdlO
zAV+9tlnC92f3hJ9WX4u8v3VzJ9DnUb9LiLS+GReSd5v0jvCL8Pv9fxsa6nf
1/yOx2dMLZ+dUmgadv6RW8YuhhkzZpRd+xFpSLLa4qRJk6JWwzwT/Vd8Zcwz
Ub8s5hUmX2/y5MnhF+ZnxPNZRKRyyfYWc2TzTNRX+F3+2muvRR0GP0F1u/vQ
RviGmYk68MADo5eFpiG3j1kpfJl5X7FIY5Gd27Nnz06XX3551CfRNxzUavgZ
KKwtotmfeeaZ1KdPn7THHnukfv36RZ+WjD79YyIiSwbZvNPgwYNTp06dwjfD
7/eaajf0s+hhMStO3QZNo79GKhX0C+cnuUvMN6G/i4G2p5ZDBh/9Kuo75GuT
h/DHP/5x8T5pERGpNegT8lRPPvnkmP/Gg8DMyNixY6NmU51OQQtR1yFHnp4U
9frC7GI1jjQW1BXz+Ur8yfmJ333+/PlFe0v4z8igpE5Dzwpd87Of/Syynujd
4rcREZHKhkyy2267LWouZI7hldl0002j/s7v/lIeYPyV5NJn3kruz6wI+xvw
L+hNkMVJ5vtFv1Cf4fym9lhOhiQ6ntxKdsGSf4DGZ36KmT9ybPAQi4hIZUOm
Hl6Zdu3aRZ4q70/XXXfddMopp5TlKcjeF0Pm3aGPhZ+hd+/eaebMmdZtZLHB
uUgt8aabbkr77LNPZGTjGSsnN5LzFG8YPVnytckvILPm3nvvDb3ueSwiUvnw
HvXNN99MAwYMiNnXHXbYIfwFaBPq7tXt+S7G66+/HvvD6WOxG3DLLbdM1157
beSHVOdDFqlPqM2QM3PMMcekNddcM/Q62mT8+PFl+WPQPmggzuUpU6bEY73z
zjsN/8RFRKTeoMZCRtnw4cND3+CVyXRIVo8pVcfnNrTQfvvtF9cTckI4jjji
iDRx4sSYtxJpaPDOsLupffv2VefgFltskX7961/HXFQhnLdkH7ALlp8DdHz+
PLdGIyKy5JHNebM3B18Mv9+zjHj6UNRt8NCUqrnQc2InwyabbFJ1TUHnoJf0
XMrigB4S5yD+mCyDj5k9vPGffvrpAvfN8m3IXKJfRc4N57+5kiIiTQ9q8VwH
qMXfcccdkeFBbb6m96/MR3FtINuV68qee+4Zu3TIA6lpr2ZDgm/5D3/4Q3r5
5ZfjvXw5ufnSMNAjKveo6/nCOYsf5txzzw0906FDh9AszP0VZvCh0+mRDhky
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
KuumkFK6ptAbj6enkMK6JjvPRESkcqEncNttty2kY55++unI5Mv+zfWpvqFX
hKc0f61Dz9APICeWmk5NoHu4b9euXaNeQ8b+oYceGvUfvBPuWGgcqMVQ58AX
06ZNm3hN2BNGn7FUvSWr6XAesBOKbBnqiOz4qO3rWUrXsOcjfzuzWYUwB5i/
D/pMREQqG/QF9Q3em86fPz80Ab2iUrMi9Uk2A0OmyYknnpi6desWeotZ3+r2
SKGHyGajlkTOfu/eveN9PbuenVtpPPCk4HnaZptt0nLLLZc22GCDdPLJJ8ds
fnX+GF7LfD2GP9FB6G5qJDXtf6+OUroG/ZS/HR1VCLNY+fssSva2iIg0HLzv
5DrD8cgjjyz0PrSw/s5sdUOCb+HGG28M/y89JbwyZPDRk6hpTwKaDJ8E1z/y
S/LXP2oD9DXQRfXlDZKaQY/Qf6J3tN5660VvkNeSf5P/Ut2+buoz9CXxRaE3
6qPWVkrXADNa2e2FmcKFWcRk2YiISGVSOONKxn1WF+F6kO9N0UNo6LlpvDLn
nntu7DPkWsgMDLstzz777Bq9mlz/0C/Ul+hLcY3MPk4vZNKkSaF5CmdvpGHg
PEETkz3Tvn371KJFi9jDfd5550XdpTBfiHOOmhzn2SGHHBJzcmT+olcX9Zwr
R9dw3uXvw8wV5wpHYa0Gn5CIiFQuhfuhmI8qttubmdyGhmsefh7e1+OVoXdB
jhtfn35EuXA9xDdBRg4z38ccc0y66qqrwjtR035NqR/4/vL9x5/F9/2kk06K
14DZbXqDhVqFOg234cFh7onZtksuuSRyiBY1K6YcXcP5Qh+zlG+eWpO9TRGR
yob3pMxa1/T7fHG9R82y88mx2WmnnULTUEOij1SbuSZ6B1y/2NHQunXryLQh
25Zrpf2ohqVQM1JDo++Et5uc6GJQUzv22GPjNcr2meLLufjii+O2RaEcXQPU
Awt3X+YPbqPmJyIilQ/eFWrv+d/j+Ax4D72o15XakM1+o6PoHVFfIXOPvhK3
ZbeXqrega8i+J8eG9//0tOiFsHORPGPzYhsG+ppZrmJWk8m0KrsSiu234HZ6
VtR0mJui97jssstGP4peVG0y+IrBuV2OrgF8PeTmFGoaPsZtIiKyZIFHhZ4A
768bM6uX55G/NmZZbewfnzZtWtWscHX6huvnCy+8EHsZqAGQZ7zxxhunU089
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
L2gP7r///vvHzHdWs8n2fLdq1Srts88+6b777ovPL9Q2+IHJ++NrbL311jFL
9etf/zp2THF/ajmFqGtERESkXMrRNYC2IauPvQZnnHFG5APnazZoG/zD1HIG
DRqUZs2atYD/F3hM+k3k8JFXgyeH+fC33nor6jjFelfqGhERESmXcnUNMPON
t5e+ETUbdEY+y4Z/r7feeunII49MY8aMWaj+QiYx8+Lst9x8881jBwNzVp9+
+mm1M1TqGhERESmX2ugadAqzTg8++GDq1atX7PRmT1TeP8w+TB7vsssui+y9
LM+GP8kSPvTQQ0OjtG/fPuo67PJGL1WnSdQ1IiIiUi610TX0idAn5ArTP2Lm
e9VVV12gF7X00kunDTbYIB1//PHp5ZdfTl9//XXMbvPnTTfdFBl+7NDEN/zY
Y4+FHuH26uan1DUiIiJSLrXRNYBnhjnu8ePHR04feiOvM8jpQ+vstdde6dZb
bw2v8TfffJNeeOGFyLdhHhwPTu/evdPvf//79Je//KXGfGJ1jYiIiJRLbXUN
GoTaCzqFXhOfS40m89lkOX3s/2anFLNO7777bvrtb3+b9ttvv7TSSiuFN4fa
DXsy8zsTiqGuERERkXKpra7JelFolbFjx6ZDDjkk6jNLLbVUldbg78xw4w8m
q+bpp59ORx99dHiFue8555yTnnrqqfTtt99GD6om1DUiIiJSLrXVNUDNhmxg
djyde+65kUVDLl9hTh+zUWQJX3rppWn77bePfGHqOGQSz5s3L3KMS+3IVNeI
iIhIudRF18APP/yQ3nnnndAoXbt2TautttoCM9/4bNAh2223Xdpzzz2jTkNm
DbsWHn300ZK+mgx1jYiIiJRLXXUNvSh8NmgUajYbb7xx+Gzys1HUbVq0aBF5
fdy20047pcsvvzxybPDVVDcDlUddIyIiIuVSV13DbfSR0Ch4gjt27LjAzHde
31C7wUtMDt8jjzySPv7444WyiKtDXSMiIiLlQL1k2LBhUUdB17AboVxdk4FG
IW+PjOHCme9M1yyzzDKRWUNd58MPP4wdmuXUaqBcXcPjqmtERESaD/hZmD/i
oNaCvmAnAp7ebLcTOcLkCbOfkl4R+w24P5qhmBb561//Gvl7ZAfvvvvuUZsp
9NlQx8Fjc/vtt8cMVLGdCTw3vgYHtZzsYE6c3JvqdM0WW2wRt5OpQ28s+zwe
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
Tmrbtm36+c9/nv793/+9qE+YnBtmps8+++z4HOagKq0HlXlrzjrrrNBfLVu2
jOfNngh80iIiItK0QdvgtTnllFNS69atw0dMXWbZZZeNA62zyiqrhMf4qquu
Sh999FHsYKpE8Al///33sUMBLYZGy567ukZERKTpw8z3jz/+GNf9Bx98MN15
552hX9iTwMHf77rrrjR16tT01ltvhaappBmoPNSQ2O3Qp0+ftOGGG4Yu23jj
jWMHFrNbIiIi0nzI8l/w2pLbR+4euxLYJ8ltlQ61p88//zyNHj06nXHGGeGJ
pg7F7kvqTCIiItJ8yPJfqMf84x//iNoM3mA+tiTk2vEcqT9RtyF7+M9//nPM
QuGPdh5KRESkeYGWYXabWg17li6//PI0ceLE9NVXX8VtSxJoHPQZegZ9ht4R
ERGR5gM1Dnw211xzTTrggAPSuuuum44//vjoR3FbpUI96bvvvoseFP0mnit1
piWhxiQiIiINA5k0N910U+rSpUvMEbETmz1Ql112WXr77bcb++lVC/UYZs9v
vvnmmFl/4IEH4v+yJHiCREREpGH45JNP0n333Zc6d+4c2cLMSW+33XYxF/XG
G2809tMrCv0l6jSDBw9OBx54YNpqq61Sz549wys8f/78mPUSERGR5kc2J33q
qadGjk2LFi3SXnvtlW644Yaof1RiXwffD/Nbhx56aFp11VWr9j20b98+PfLI
I+EdFhERkeZHNks0duzYyBW+4ooroqdTyXUPcvheeeWV0DVrrLFG6JrVV189
9iiwO8E5KBERkeYNmTXPP/989J6YhQJqNd9++2187LPPPgu9UAl7FNBbPF92
VuELWm+99dI+++wTfSlyd0RERKR5k+XXsJcg0y7UcubMmZP69++fJk+enD79
9NO4vbFBb+EPZj/5pEmTwltz2223xXOtxL2cIiIi0nigG6jNPP300+nCCy9M
7dq1S927d09XX311mjt3btRwFjd4fcjYoc9E3k6WVcOM95QpU+Lj1GrMrBER
EZE8aAN6UZdccknMRrFPEk8xu72pj+AzXlzg/cEHzJ4EZs9vueWW0DfUliqh
JyYiIiKVDVoC3/AJJ5wQOX3MGv3nf/5n2n777dPDDz8cXpvFBXWYIUOGhH+G
3ePMdF955ZVRp9EfLCIiIqWgFkKN5NZbb03dunWLWaPNN988HXvssZFNzDwS
NZ0vvvgi/Lsvvvhi6Az00KLWUArnyqnNnH766fH10VfkBh555JHRe6IfJSIi
IlIK9Am9qHvvvTftvPPO6aSTTkqjRo2q0hJoH/TM8OHD07nnnhs7pf74xz8u
tMsg26tZ3R7NzCfD46GLmHXK76VC17Cne4sttghds/TSS6c999wzMvj4eiIi
IiKlQG+gL9AO1EbQMO+9916V5qBmw/4F6jnUUvDenHXWWem1114LbZLNLLG3
if3a1H+++eabhXwx6KSXXnopNBP+mT59+qTHHnusSgPxeU899VTab7/9oifG
12P2iVw+dimIiIiIlAsaBH3CfDe9J/QGf8c7fPLJJ6dWrVrF7gX8Nx06dIh9
meiazHs8c+bMdOONN6bbb7899jX8/ve/r8rHAXZQoY8OP/zw1LZt23g8sgF/
+OGHqjoOc07MYmU1o7feeqsic5BFRESk8inUEOzRfvXVV6MfxKwUeb/MS7Fj
ijpKpoWo3QwcODB2HbRs2TJ0y6WXXhr1mYwZM2akI444Im266aahjXi8X//6
11X1mKyPhY56//33q/SOiIiISH2Q+Yrx1lBD2WWXXdJuu+0WPhj2aAI+G/RL
375901JLLRXah1pM79690zPPPFP1WPS3mLtC11D34b74k1944YXoYWXweJWS
dywiIiJNi2yn9rRp06JHRO9oxIgRVXsM0CHUYvr165dWWWWV2Ke58cYbR+/q
iSeeqHoccv4GDBiQOnXqlDbbbLO07bbbxufwuHldIyIiItJQZL5gelL0iD7+
+OOY+872LFDTYa8B3pq999477bTTTtG3wluMDziD+g6ZOPhmyN6bPn16+JN5
XPtNIiIiUgmgSdgnRZ9p5MiRkYVD34q8YrwzGfhl8M3wMWav7DWJiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiEhD8OOP
P6avvvoqDvYl1MTf/va39OGHH6ZXXnklzZ49O7377rvx+SIiIiKVwMSJE9Nv
f/vbOJ599tmi92EX1Msvv5xuueWWqvtmBzulnn/++divKSIiItJYsKc7r1Gq
0zVPPvnkQnqm8GBX5j//+c/F/D8QERGR5g77uOfMmRO1llK65qOPPlpIw4wf
Pz7dddddC3389ddfb4T/jYiIiDRH3n777XTHHXdUW3MppmumTJmywH3eeOON
+Pj//u//hscmfxv3FREREVkcvPbaazX2korpmtGjR1fdPmzYsAV6Tf/93/+9
QM1nwoQJi/O/IyIiIs2YefPm1VrXUIPJDuozef7yl78s8PnTp09fXP8VERER
aebQO2JWOzuY2S7HN5yHuW56UdOmTYv6Tf7z//SnPy2G/4WIiIjIwnz55Ze1
1jVvvfVW0VpP5rsRERERaQzqU9eQg/PXv/51MTxrERERkYWpi6755ptvYp57
xowZadSoUQt8/pgxYxbDsxYRERFZmFK6hpzhr7/+uur4n//5nwVu/8c//pHu
vvvuBR7Dmo2IiIg0BqV0zfz58xe4/b333lvoMaZOnbrAfZglFxEREVnclNI1
n3/++QK3s08hD/WckSNHLnAfZqxEREREFjeldA27LG+++eaq2/n73LlzI5vv
u+++i7yaQv8wOxpEREREFjfl+IZnzpy5kHbJax33KIiIiEglUI6uwSt87733
ltznPW7cuNirICIiItIYMONUzpw3Phr2fw8fPnwhPcMeTW7L740SERERWRJg
/wL7Ej755JPYqSAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IksG/x+PRSm3
    "], {{0, 509.}, {566., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVlwdUk8kWgOf/U0mhJAEBKaGGIkgngJQQWgClV1EJSUhCCTEJINhQWVzB
taAiAuqCiiIKrq6ArAWxYFsUG/YFWRSU52LBhsr7gUfY3Xfee+fdnJn5cnPn
ljkz59wYpWRFpsIAADkemSK5uSyZjJsXpY58iZHIxUKJgM+RKARCgYyZAiHK
UDIyAXIoVyrNgBGrTIlCFhnoS49PSKTjngEUgAEZuAE9Lk8uZYWHh45bT61/
lfd3wbhDcMtm3Ne///5fhcIXyHkAQEkIp/DlvEyE25AxzJPKFACgjiB6k1yF
dJxvI0yTIQkiPDDOwkn+Ms4pE4xWn7CJjmQjbAoAnsTlyoQAkOwQPT2HJ0T8
kMIRtpPwxRKECxD24om4fISRuGBWZmbWOA8hbIHYS5EzoiHMTPmTT+Ff/Kco
/XO5QiVP1jUheD+xXJrBzfs/j+Z/S2ZG9lQMc2SQRLKgSGTVRs7vXnpWiJIl
KfPCpljMn7CfYFF2UMwU8+TsxCnmc/1ClHsz5oVOcao4gKP0o+BET7FA7h81
xbKsSGWsVBmbNcVc2XTc7PQYpV4k4Cj954ui46Y4Rxw7b4rl6VEh0zZspV6W
HanMXyAJ9J2OG6CsPVP+p3rFHOVehSg6SFk7dzp/gYQ17VMer8yNL/Dzn7aJ
UdpLFb7KWNKMcKW9ICNQqZfnRCn3KpDLOb03XHmGadzg8CkGfsAfhCIfOggH
DsAJ2CMvMQiwFYIlivFi2FnSPJlYKFLQWciLE9A5Ep7tLLqDnYMDAOPvd/JK
vL038S4hLfy0LiUXAMcIRFk2rct4C8BZ5I5T7Kd1DOQdEysBOJPKy5blTOrQ
4xMGEIAaoAEdYABMgAWwQfJzAR7AB8k4GISBaJAAFgIeEIFMIAO5YBlYBYpA
CdgEtoEKsBvsAQfAYXAUNIOT4Cy4CK6CG+AOeAh6QD94CYbBezAKQRAOIkNU
SAcyhMwga8gBYkJekD8UCkVCCVAyJIQkUDa0DFoDlUClUAVUDdVBP0EnoLPQ
ZagLug/1QoPQG+gzjIJJMA3Wh83h2TATZsEhcDS8ABbCi+F8uBDeAJfDNfAh
uAk+C1+F78A98Et4BAVQRJQWyghlg2Ki2KgwVCIqFSVDrUAVo8pQNagGVCuq
A3UL1YMaQn1CY9FUNB1tg/ZAB6Fj0Dz0YvQK9Hp0BfoAugl9Hn0L3YseRn/D
kDF6GGuMO4aDiccIMbmYIkwZphZzHHMBcwfTj3mPxWK1sAysKzYIm4BNwy7F
rsfuxDZi27Bd2D7sCA6H08FZ4zxxYTguToErwu3AHcKdwd3E9eM+4ol4Q7wD
PgCfiJfgV+PL8Afxp/E38c/xoyrqKmYq7iphKnyVPJWNKntVWlWuq/SrjBI0
CAyCJyGakEZYRSgnNBAuEB4R3hKJRGOiGzGCKCYWEMuJR4iXiL3ETyQKyYrE
JiWRskkbSPtJbaT7pLdkMtmc7ENOJCvIG8h15HPkJ+SPqlRVW1WOKl91pWql
apPqTdVXaipqZmostYVq+WplasfUrqsNqauom6uz1bnqK9Qr1U+od6uPaFA1
7DXCNDI11msc1LisMUDBUcwp/hQ+pZCyh3KO0kdFUU2obCqPuoa6l3qB2k/D
0hg0Di2NVkI7TOukDWtSNJ00YzWXaFZqntLs0UJpmWtxtDK0Nmod1bqr9XmG
/gzWDMGMdTMaZtyc8UF7praPtkC7WLtR+472Zx26jr9Ous5mnWadx7poXSvd
CN1c3V26F3SHZtJmeszkzSyeeXTmAz1Yz0ovUm+p3h69a3oj+gb6gfpS/R36
5/SHDLQMfAzSDLYanDYYNKQaehmKDbcanjF8Qdeks+gZ9HL6efqwkZ5RkFG2
UbVRp9GoMcM4xni1caPxYxOCCdMk1WSrSbvJsKmh6VzTZab1pg/MVMyYZiKz
7WYdZh/MGeZx5mvNm80HGNoMDiOfUc94ZEG28LZYbFFjcdsSa8m0TLfcaXnD
CrZythJZVVpdt4atXazF1jutu2ZhZrnNksyqmdVtQ7Jh2eTY1Nv02mrZhtqu
tm22fTXbdHbi7M2zO2Z/s3O2y7Dba/fQnmIfbL/avtX+jYOVA8+h0uG2I9kx
wHGlY4vjaydrJ4HTLqd7zlTnuc5rndudv7q4ushcGlwGXU1dk12rXLuZNGY4
cz3zkhvGzddtpdtJt0/uLu4K96Puf3jYeKR7HPQYmMOYI5izd06fp7En17Pa
s8eL7pXs9aNXj7eRN9e7xvupj4kP36fW5znLkpXGOsR65WvnK/M97vuB7c5e
zm7zQ/kF+hX7dfpT/GP8K/yfBBgHCAPqA4YDnQOXBrYFYYJCgjYHdXP0OTxO
HWc42DV4efD5EFJIVEhFyNNQq1BZaOtceG7w3C1zH80zmyeZ1xwGwjhhW8Ie
hzPCF4f/EoGNCI+ojHgWaR+5LLIjihq1KOpg1Pto3+iN0Q9jLGKyY9pj1WKT
YutiP8T5xZXG9cTPjl8efzVBN0Gc0JKIS4xNrE0cme8/f9v8/iTnpKKkuwsY
C5YsuLxQd2HGwlOL1BZxFx1LxiTHJR9M/sIN49ZwR1I4KVUpwzw2bzvvJd+H
v5U/KPAUlAqep3qmlqYOCD2FW4SDIm9RmWhIzBZXiF+nBaXtTvuQHpa+P30s
Iy6jMROfmZx5QkKRpEvOZxlkLcnqklpLi6Q9i90Xb1s8LAuR1coh+QJ5i4KG
NErXsi2yv8vuzfHKqcz5mBube2yJxhLJkmt5Vnnr8p7nB+TvW4peylvavsxo
2aplvctZy6tXQCtSVrSvNFlZuLK/ILDgwCrCqvRVv662W126+t2auDWthfqF
BYV93wV+V1+kWiQr6l7rsXb39+jvxd93rnNct2Pdt2J+8ZUSu5Kyki/reeuv
/GD/Q/kPYxtSN3RudNm4axN2k2TT3c3emw+UapTml/ZtmbulaSt9a/HWd9sW
bbtc5lS2ezthe/b2nvLQ8pYdpjs27fhSIaq4U+lb2VilV7Wu6sNO/s6bu3x2
NezW312y+/OP4h/vVQdWN9WY15Ttwe7J2fNsb+zejn3MfXW1urUltV/3S/b3
HIg8cL7Ota7uoN7BjfVwfXb94KGkQzcO+x1uabBpqG7Uaiw5Ao5kH3nxU/JP
d4+GHG0/xjzW8LPZz1XHqceLm6CmvKbhZlFzT0tCS9eJ4BPtrR6tx3+x/WX/
SaOTlac0T208TThdeHrsTP6ZkTZp29BZ4dm+9kXtD8/Fn7t9PuJ854WQC5cu
Blw818HqOHPJ89LJy+6XT1xhXmm+6nK16ZrzteO/Ov96vNOls+m66/WWG243
WrvmdJ2+6X3z7C2/Wxdvc25fvTPvTtfdmLv3upO6e+7x7w3cz7j/+kHOg9GH
BY8wj4ofqz8ue6L3pOY3y98ae1x6TvX69V57GvX0YR+v7+Xv8t+/9Bc+Iz8r
e274vG7AYeDkYMDgjRfzX/S/lL4cHSr6h8Y/ql5ZvPr5D58/rg3HD/e/lr0e
e7P+rc7b/e+c3rWPhI88eZ/5fvRD8Uedjwc+MT91fI77/Hw09wvuS/lXy6+t
30K+PRrLHBuTcmXciVYAhQw4NRWAN/uR/jgBAOoNAAjzJ/vrCYEm/xNMEPhP
PNmDT4gLAPuQZbz9i/QBoAoZjDakB0FGOMLRPgB2dFSOf4k81dFh0hexGWlN
ysbG3iIOcJYAfO0eGxttHhv7Wosk+wCAtveTff24qB8CoFrPLs7B9+HyqwXg
bzLZ8/+pxr+vYDwDJ/D39Z/dnSc9
      "], "RGB", "XYZ"], Interleaving -> True, 
    MetaInformation -> Association["XMP" -> Association[]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{300.82553710937435`, Automatic},
  ImageSizeRaw->{566., 509.},
  PlotRange->{{0, 566.}, {0, 509.}}]], "Input",ExpressionUUID->"1f6c7f6c-aa02-\
4e36-a05d-921ebe3fe9ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Now each network is perfectly characterized by two lists of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5335b470-ddd7-473a-9c0c-74eebc51015c"],
 "\[CloseCurlyQuote]s  and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["A", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "55965d97-a72a-4a64-b744-06c2d3261f4a"],
 "\[CloseCurlyQuote]s (i=1 to 13 for 13 possible edges). ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "610a16a2-c413-4403-bfb0-f6e0a8363864"],
 "=1(0) represents ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["i", "th"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "fcb297dc-f01e-4823-98bf-0f95c80533a7"],
 " edge being present(absent) and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["A", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2498435f-e9eb-47a7-b9a6-435467012754"],
 "=1(0) represents ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["i", "th"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "8e5a4022-fb4f-447e-beb6-63328b36bf30"],
 " edge being activation(repression) given ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "b1141814-340d-47da-a668-82b4671f7d5c"],
 "=1. The code below selects successful five node nedge(possible number of \
edges) network in terms of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "e59d0a9c-1f6e-45d8-be03-05081f79f354"],
 "\[CloseCurlyQuote]s  and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["A", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "21b76f4c-0baa-4a2d-b90b-1fde871cfc42"],
 "\[CloseCurlyQuote]s that can satisfy value antagonism."
}], "Subsubsection",
 CellChangeTimes->{{3.85878833432292*^9, 
  3.8587886150194397`*^9}},ExpressionUUID->"7ddd7d66-be88-4571-a672-\
f9986a117009"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Extract", " ", "all", " ", "possible", " ", "networks", " ", "with", " ", 
    "nedges"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"nedges", "=", "6"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"numbr", " ", "of", " ", "edges", " ", "present"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"HA", "=", "1"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{"Power", " ", "of", " ", "auto", " ", "activation", " ", 
        RowBox[{"da", "/", "dt"}]}], "=", 
       RowBox[{"a", "^", "HA"}]}], ",", " ", 
      RowBox[{
       RowBox[{
       "in", " ", "our", " ", "calculations", " ", "we", " ", "use", " ", 
        "linear", " ", "auto"}], "-", "activation"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"maxedges", "=", "13"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"npts", "=", "100"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"smax", "=", "100"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AAR", "=", "1"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Auto", "-", 
       RowBox[{"activation", " ", 
        RowBox[{"rate", "/", "degradation"}], " ", "rate"}]}], ",", " ", 
      RowBox[{"default", " ", "is", " ", "1"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"nedgenetwork", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "0"}], ",", 
     RowBox[{"i", "<", 
      RowBox[{"2", "^", "maxedges"}]}], ",", 
     RowBox[{"i", "++"}], ",", 
     RowBox[{
      RowBox[{"ls", "=", 
       RowBox[{"PadLeft", "[", 
        RowBox[{
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"i", ",", "2"}], "]"}], ",", "maxedges"}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", 
       RowBox[{"Getting", " ", "list", " ", "of", " ", 
        RowBox[{"P", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Getting", " ", "possible", " ", "lists"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"T", "=", 
       RowBox[{"Total", "[", "ls", "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "Total", " ", "number", " ", "of", " ", "edges", " ", "present"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"T", "==", "nedges"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"nedgenetwork", ",", "ls"}], "]"}], ",", "0"}], "]"}]}]}], 
    "]"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "Only", " ", "choosing", " ", "network", " ", "with", " ", "nedges", " ", 
     "present"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Extract", " ", "list", " ", "of", " ", 
      SubscriptBox["A", "i"], "s"}], ",", " ", 
     RowBox[{
      RowBox[{"if", " ", 
       SubscriptBox["A", "i"], " ", "is", " ", "1", 
       RowBox[{"(", "0", ")"}], " ", "and", " ", "edge", " ", "i", " ", "is", 
       " ", "present", " ", 
       SubscriptBox["P", "i"]}], "=", 
      RowBox[{
      "1", " ", "the", " ", "interaction", " ", "is", " ", "activation", 
       RowBox[{"(", "repression", ")"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"L", "=", 
     RowBox[{"Length", "[", "nedgenetwork", "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"Length", " ", "of", " ", "three", " ", "edge", " ", "network"}],
      "*)"}], "\[IndentingNewLine]", 
    RowBox[{"listofA", "=", 
     RowBox[{"{", "}"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"possible", " ", "values", " ", "of", " ", "3", " ", 
      RowBox[{
       SubscriptBox["A", "i"], "'"}], "s", " ", "present"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "0"}], ",", 
      RowBox[{"i", "<", 
       RowBox[{"2", "^", "nedges"}]}], ",", 
      RowBox[{"i", "++"}], ",", 
      RowBox[{
       RowBox[{"ls", "=", 
        RowBox[{"PadLeft", "[", 
         RowBox[{
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"i", ",", "2"}], "]"}], ",", "nedges"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Getting", " ", "possible", " ", "list", " ", "of", " ", 
         RowBox[{"A", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"listofA", ",", "ls"}], "]"}]}]}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Append", " ", "possible", " ", "lists"}], "*)"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", "listofA", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LA", "=", 
     RowBox[{"Length", "[", "listofA", "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
     "Length", " ", "of", " ", "list", " ", "of", " ", "subsets", " ", "in", 
      " ", "our", " ", "case", " ", "it", " ", "is", " ", "8"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"listofallA", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"All", " ", "possible", " ", "list", " ", "of", " ", 
      RowBox[{"A", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "<=", "L"}], ",", 
      RowBox[{"i", "++"}], ",", 
      RowBox[{
       RowBox[{"ls", "=", 
        RowBox[{"nedgenetwork", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"i", "^", 
          RowBox[{"{", "th", "}"}]}], " ", "list", " ", "in", " ", "3", " ", 
         "edge", " ", "network"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"lP", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"ls", ",", "1"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"List", " ", "of", " ", "position", " ", "of", " ", 
         RowBox[{"1", "'"}], "s", " ", "present"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"lA", "=", 
        RowBox[{"{", "}"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "Initialising", " ", "list", " ", "of", " ", "networks", " ", "with", 
         " ", "A", " ", "for", " ", "a", " ", "given", " ", "network", " ", 
         "with", " ", "3", " ", "edges", " ", "present"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "<=", "LA"}], ",", 
         RowBox[{"j", "++"}], ",", 
         RowBox[{
          RowBox[{"ls", "=", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "maxedges"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "<=", "nedges"}], ",", 
            RowBox[{"k", "++"}], ",", 
            RowBox[{
             RowBox[{"pos", "=", 
              RowBox[{
               RowBox[{"lP", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             RowBox[{"(*", 
              RowBox[{
              "position", " ", "in", " ", "A", " ", "list", " ", "which", " ",
                "needs", " ", "to", " ", "be", " ", "updated"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"elem", "=", 
              RowBox[{
               RowBox[{"listofA", "[", 
                RowBox[{"[", "j", "]"}], "]"}], "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ";", 
             RowBox[{"(*", 
              RowBox[{
              "corresponding", " ", "elements", " ", "in", " ", "list", " ", 
               "of", " ", 
               RowBox[{"A", "'"}], "s", " ", "microlist"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"ls", "[", 
               RowBox[{"[", "pos", "]"}], "]"}], "+=", "elem"}]}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"lA", ",", "ls"}], "]"}]}]}], 
        RowBox[{"(*", 
         RowBox[{"Append", " ", "microlist", " ", "to", " ", "lA"}], "*)"}], 
        "]"}], ";", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"listofallA", ",", "lA"}], "]"}]}]}], 
     RowBox[{"(*", 
      RowBox[{"Append", " ", "list", " ", "lA", " ", "to", " ", "superlist"}],
       "*)"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NP", "=", 
     RowBox[{"Length", "[", "nedgenetwork", "]"}]}], ";", "  ", 
    RowBox[{"(*", 
     RowBox[{
     "number", " ", "of", " ", "3", " ", "edge", " ", "netoworks", " ", 
      "with", " ", "unique", " ", 
      SubscriptBox["P", "i"]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"NA", "=", 
     RowBox[{"2", "^", "nedges"}]}], ";", "  ", 
    RowBox[{"(*", 
     RowBox[{
     "number", " ", "of", " ", "3", " ", "edge", " ", "netoworks", " ", 
      "with", " ", "unique", " ", 
      SubscriptBox["A", "i"], " ", "per", " ", "NP", " ", "network"}], "*)"}],
     "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "NP"}], ",", 
      RowBox[{"i", ">=", "1"}], ",", 
      RowBox[{"i", "--"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", "i", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Plist", "=", 
        RowBox[{"nedgenetwork", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"Extracting", " ", "three", " ", "edge", " ", "network"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"extracting", " ", "individual", " ", 
         SubscriptBox["P", "i"], " ", "values"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "1"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "2"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "3"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "4"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "5"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "5", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "6"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "6", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "7"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "7", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "8"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "8", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "9"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "9", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "10"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "10", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "11"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "11", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "12"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "12", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        SubscriptBox["P", "13"], "=", 
        RowBox[{"Plist", "[", 
         RowBox[{"[", "13", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "<=", "NA"}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Alist", "=", 
           RowBox[{
            RowBox[{"listofallA", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "k", "]"}], "]"}]}], ";", " ", 
          RowBox[{"(*", 
           RowBox[{"Corresponding", " ", "list", " ", "of", " ", 
            RowBox[{"A", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"extracting", " ", "individual", " ", 
            SubscriptBox["A", "i"], " ", "values"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "1"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "2"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "3"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "4"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "5"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "5", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "6"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "6", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "7"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "7", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "8"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "8", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "9"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "9", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "10"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "10", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "11"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "11", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "12"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "12", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox["A", "13"], "=", 
           RowBox[{"Alist", "[", 
            RowBox[{"[", "13", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Both", " ", "signals", " ", "present"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Dynamical", " ", "equation", " ", "of", " ", "A"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"dadt", "=", 
           RowBox[{"1", "-", "a", "+", 
            RowBox[{
             SubscriptBox["P", "1"], "*", 
             SubscriptBox["A", "1"], "*", 
             SubscriptBox["s", "1"]}], "+", 
            RowBox[{
             SubscriptBox["P", "4"], "*", 
             SubscriptBox["A", "4"], "*", 
             SubscriptBox["s", "2"]}], "+", 
            RowBox[{
             SubscriptBox["P", "5"], "*", 
             SubscriptBox["A", "5"], "*", "b"}], "+", 
            RowBox[{
             SubscriptBox["P", "9"], "*", 
             SubscriptBox["A", "9"], "*", "m"}], "+", 
            RowBox[{"AAR", "*", 
             SubscriptBox["P", "11"], "*", 
             SubscriptBox["A", "11"], "*", 
             RowBox[{"a", "^", "HA"}]}], "-", 
            RowBox[{"a", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                SubscriptBox["P", "1"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "1"]}], ")"}], "*", 
                SubscriptBox["s", "1"]}], "+", 
               RowBox[{
                SubscriptBox["P", "4"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "4"]}], ")"}], "*", 
                SubscriptBox["s", "2"]}], "+", 
               RowBox[{
                SubscriptBox["P", "5"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "5"]}], ")"}], "*", "b"}], "+", 
               RowBox[{
                SubscriptBox["P", "9"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "9"]}], ")"}], "*", "m"}], "+", 
               RowBox[{
                SubscriptBox["P", "11"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "11"]}], ")"}], "*", "a"}]}], ")"}]}]}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Dynamical", " ", "equation", " ", "of", " ", "B"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"dbdt", "=", 
           RowBox[{"1", "-", "b", "+", 
            RowBox[{
             SubscriptBox["P", "2"], "*", 
             SubscriptBox["A", "2"], "*", 
             SubscriptBox["s", "2"]}], "+", 
            RowBox[{
             SubscriptBox["P", "3"], "*", 
             SubscriptBox["A", "3"], "*", 
             SubscriptBox["s", "1"]}], "+", 
            RowBox[{
             SubscriptBox["P", "8"], "*", 
             SubscriptBox["A", "8"], "*", "a"}], "+", 
            RowBox[{
             SubscriptBox["P", "10"], "*", 
             SubscriptBox["A", "10"], "*", "m"}], "+", 
            RowBox[{"AAR", "*", 
             SubscriptBox["P", "12"], "*", 
             SubscriptBox["A", "12"], "*", 
             RowBox[{"b", "^", "HA"}]}], "-", 
            RowBox[{"b", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                SubscriptBox["P", "2"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "2"]}], ")"}], "*", 
                SubscriptBox["s", "2"]}], "+", 
               RowBox[{
                SubscriptBox["P", "3"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "3"]}], ")"}], "*", 
                SubscriptBox["s", "1"]}], "+", 
               RowBox[{
                SubscriptBox["P", "8"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "8"]}], ")"}], "*", "a"}], "+", 
               RowBox[{
                SubscriptBox["P", "10"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "10"]}], ")"}], "*", "m"}], "+", 
               RowBox[{
                SubscriptBox["P", "12"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "12"]}], ")"}], "*", "b"}]}], ")"}]}]}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Dynamical", " ", "equation", " ", "of", " ", "M"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"dmdt", "=", 
           RowBox[{"1", "-", "m", "+", 
            RowBox[{
             SubscriptBox["P", "6"], "*", 
             SubscriptBox["A", "6"], "*", "a"}], "+", 
            RowBox[{
             SubscriptBox["P", "7"], "*", 
             SubscriptBox["A", "7"], "*", "b"}], "+", 
            RowBox[{"AAR", "*", 
             SubscriptBox["P", "13"], "*", 
             SubscriptBox["A", "13"], "*", 
             RowBox[{"m", "^", "HA"}]}], "-", 
            RowBox[{"m", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                SubscriptBox["P", "6"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "6"]}], ")"}], "*", "a"}], "+", 
               RowBox[{
                SubscriptBox["P", "7"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "7"]}], ")"}], "*", "b"}], "+", 
               RowBox[{
                SubscriptBox["P", "13"], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", 
                  SubscriptBox["A", "13"]}], ")"}], "*", "m"}]}], ")"}]}]}]}],
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eqn", "=", 
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"dadt", "==", "0"}], ",", 
               RowBox[{"dbdt", "==", "0"}], ",", 
               RowBox[{
                RowBox[{"dmdt", "==", "0"}], " ", "&&", 
                RowBox[{
                 SubscriptBox["s", "1"], ">=", "0"}], "&&", 
                RowBox[{
                 SubscriptBox["s", "2"], ">=", "0"}], "&&", " ", 
                RowBox[{"a", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"b", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"m", ">=", "0"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "m"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Successful", " ", "solutions", " ", "with", " ", "positivity", 
            " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"aS", "=", 
           RowBox[{"a", "/.", "eqn"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"bS", "=", 
           RowBox[{"b", "/.", "eqn"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mS", "=", 
           RowBox[{"m", "/.", "eqn"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Write", " ", "the", " ", "equations", " ", "with", " ", "no", " ",
             "signals", " ", "present"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"dadt00", "=", 
           RowBox[{
            RowBox[{"dadt", "/.", 
             RowBox[{
              SubscriptBox["s", "1"], "->", "0"}]}], "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dbdt00", "=", 
           RowBox[{
            RowBox[{"dbdt", "/.", 
             RowBox[{
              SubscriptBox["s", "1"], "->", "0"}]}], "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dmdt00", "=", 
           RowBox[{
            RowBox[{"dmdt", "/.", 
             RowBox[{
              SubscriptBox["s", "1"], "->", "0"}]}], "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eqn00", "=", 
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"dadt00", "==", "0"}], ",", 
               RowBox[{"dbdt00", "==", "0"}], ",", 
               RowBox[{
                RowBox[{"dmdt00", "==", "0"}], " ", "&&", 
                RowBox[{
                 SubscriptBox["s", "1"], ">=", "0"}], "&&", 
                RowBox[{
                 SubscriptBox["s", "2"], ">=", "0"}], "&&", " ", 
                RowBox[{"a", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"b", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"m", ">=", "0"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "m"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Successful", " ", "solutions", " ", "with", " ", "positivity", 
            " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"aS00", "=", 
           RowBox[{"a", "/.", "eqn00"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"bS00", "=", 
           RowBox[{"b", "/.", "eqn00"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mS00", "=", 
           RowBox[{"m", "/.", "eqn00"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Write", " ", "the", " ", "equations", " ", "with", " ", "only", 
            " ", "signal", " ", "1", " ", "present"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"dadt1", "=", 
           RowBox[{"dadt", "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dbdt1", "=", 
           RowBox[{"dbdt", "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dmdt1", "=", 
           RowBox[{"dmdt", "/.", 
            RowBox[{
             SubscriptBox["s", "2"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eqn1", "=", 
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"dadt1", "==", "0"}], ",", 
               RowBox[{"dbdt1", "==", "0"}], ",", 
               RowBox[{
                RowBox[{"dmdt1", "==", "0"}], " ", "&&", 
                RowBox[{
                 SubscriptBox["s", "1"], ">=", "0"}], "&&", 
                RowBox[{
                 SubscriptBox["s", "2"], ">=", "0"}], "&&", " ", 
                RowBox[{"a", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"b", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"m", ">=", "0"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "m"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Successful", " ", "solutions", " ", "with", " ", "positivity", 
            " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"aS1", "=", 
           RowBox[{"a", "/.", "eqn1"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"bS1", "=", 
           RowBox[{"b", "/.", "eqn1"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mS1", "=", 
           RowBox[{"m", "/.", "eqn1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Write", " ", "the", " ", "equations", " ", "with", " ", "only", 
            " ", "signal", " ", "2", " ", "present"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"dadt2", "=", 
           RowBox[{"dadt", "/.", 
            RowBox[{
             SubscriptBox["s", "1"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dbdt2", "=", 
           RowBox[{"dbdt", "/.", 
            RowBox[{
             SubscriptBox["s", "1"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dmdt2", "=", 
           RowBox[{"dmdt", "/.", 
            RowBox[{
             SubscriptBox["s", "1"], "->", "0"}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eqn2", "=", 
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"dadt2", "==", "0"}], ",", 
               RowBox[{"dbdt2", "==", "0"}], ",", 
               RowBox[{
                RowBox[{"dmdt2", "==", "0"}], " ", "&&", 
                RowBox[{
                 SubscriptBox["s", "1"], ">=", "0"}], "&&", 
                RowBox[{
                 SubscriptBox["s", "2"], ">=", "0"}], "&&", " ", 
                RowBox[{"a", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"b", ">=", "0"}], " ", "&&", " ", 
                RowBox[{"m", ">=", "0"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"a", ",", "b", ",", "m"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "Successful", " ", "solutions", " ", "with", " ", "positivity", 
            " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"aS2", "=", 
           RowBox[{"a", "/.", "eqn2"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"bS2", "=", 
           RowBox[{"b", "/.", "eqn2"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mS2", "=", 
           RowBox[{"m", "/.", "eqn2"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "mS", "]"}], "==", "1"}], ",", " ", 
            RowBox[{"(*", 
             RowBox[{
             "If", " ", "a", " ", "unique", " ", "solution", " ", "exist"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "For", " ", "a", " ", "given", " ", "network", " ", "let", " ", 
              "us", " ", "run", " ", "a", " ", "loop", " ", "for"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"j", "=", "0"}], ",", 
              RowBox[{"j", "<", "npts"}], ",", 
              RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"Let", " ", "us", " ", "randomly", " ", "choose", " ", 
                 SubscriptBox["s", "1"]}], ",", 
                RowBox[{
                 SubscriptBox["s", "2"], " ", "values"}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"inp1", "=", 
                RowBox[{"smax", "*", 
                 RowBox[{"RandomReal", "[", "]"}]}]}], ";", " ", 
               RowBox[{"(*", 
                SubscriptBox["s", "1"], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"inp2", "=", 
                RowBox[{"smax", "*", 
                 RowBox[{"RandomReal", "[", "]"}]}]}], ";", " ", 
               RowBox[{"(*", 
                SubscriptBox["s", "2"], "*)"}], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Let", " ", "us", " ", "evaluate", " ", "m", " ", "for", " ", 
                 "fixed", " ", "value", " ", "of", " ", 
                 SubscriptBox["s", 
                  RowBox[{"1", " "}]], "and", " ", 
                 SubscriptBox["s", "2"]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"mP", "=", 
                RowBox[{
                 RowBox[{"mS", "/.", 
                  RowBox[{
                   SubscriptBox["s", "1"], "->", " ", "inp1"}]}], "/.", 
                 RowBox[{
                  SubscriptBox["s", "2"], "->", " ", "inp2"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                "m", " ", "value", " ", "for", " ", "both", " ", "signal", 
                 " ", "present"}], "*)"}], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"mP1", "=", 
                RowBox[{
                 RowBox[{"mS1", "/.", 
                  RowBox[{
                   SubscriptBox["s", "1"], "->", " ", "inp1"}]}], "/.", 
                 RowBox[{
                  SubscriptBox["s", "2"], "->", " ", "inp2"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                "m", " ", "value", " ", "for", " ", "only", " ", "signal", 
                 " ", "1", " ", "signal", " ", "present"}], "*)"}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"mP2", "=", 
                RowBox[{
                 RowBox[{"mS2", "/.", 
                  RowBox[{
                   SubscriptBox["s", "1"], "->", " ", "inp1"}]}], "/.", 
                 RowBox[{
                  SubscriptBox["s", "2"], "->", " ", "inp2"}]}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                "m", " ", "value", " ", "for", " ", "only", " ", "signal", 
                 " ", "2", " ", "present"}], "*)"}], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"m00", "=", 
                RowBox[{
                 RowBox[{"mS00", "/.", 
                  RowBox[{
                   SubscriptBox["s", "1"], "->", " ", "inp1"}]}], "/.", 
                 RowBox[{
                  SubscriptBox["s", "2"], "->", " ", "inp2"}]}]}], ";", 
               RowBox[{"(*", 
                RowBox[{
                "m", " ", "value", " ", "for", " ", "no", " ", "signals", " ",
                  "present"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Print", " ", "and", " ", "break", " ", "if", " ", "value", 
                 " ", "antagonism", " ", "is", " ", "present"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"mP1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ">", 
                   RowBox[{"m00", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&&", 
                  RowBox[{
                   RowBox[{"mP2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ">", 
                   RowBox[{"m00", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&&", 
                  RowBox[{
                   RowBox[{"mP", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<", 
                   RowBox[{"0.99", "*", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"mP1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"mP2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}]}], ",", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<list of Ps=\>\"", ",", "Plist", ",", 
                    "\"\<, list of As=\>\"", ",", "Alist", ",", 
                    "\"\<, Total edges=\>\"", ",", 
                    RowBox[{"Total", "[", "Plist", "]"}]}], "]"}], "&&", 
                  RowBox[{"Break", "[", "]"}]}], ",", "0"}], "]"}]}]}], "]"}],
             ",", "0"}], "]"}]}]}], "]"}]}]}], "]"}]}]}]}]], "Input",Expressio\
nUUID->"a51232f5-d018-48b0-a067-7053818e82bd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\




\
\>", "Title",
 CellChangeTimes->{{3.85878758738841*^9, 3.8587876215747547`*^9}, {
  3.858787710443191*^9, 3.858787762329831*^9}, {3.858787802162438*^9, 
  3.8587878732186537`*^9}, {3.858787919988308*^9, 3.8587879217740707`*^9}, {
  3.858788141462962*^9, 
  3.858788199963662*^9}},ExpressionUUID->"806dd0d5-2fdf-4ba2-bbd9-\
a7d596cf6bd9"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.858788625041101*^9},ExpressionUUID->"54120acb-b5b5-4130-9af3-\
80f8f4584a8c"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{316, Automatic}, {Automatic, 50}},
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b73fb90a-4484-40e5-b46d-5c1cb88d3fee"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 414, 6, 98, "Title",ExpressionUUID->"505a6abf-d10e-4706-91b9-a51540dd6d2d"],
Cell[CellGroupData[{
Cell[1019, 32, 298, 6, 45, "Subsubsection",ExpressionUUID->"7adbfba8-31d6-485e-ac7b-7f7ffabb5893"],
Cell[1320, 40, 69965, 1152, 284, "Input",ExpressionUUID->"1f6c7f6c-aa02-4e36-a05d-921ebe3fe9ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71322, 1197, 2104, 60, 71, "Subsubsection",ExpressionUUID->"7ddd7d66-be88-4571-a672-f9986a117009"],
Cell[73429, 1259, 34693, 835, 2931, "Input",ExpressionUUID->"a51232f5-d018-48b0-a067-7053818e82bd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108171, 2100, 353, 12, 346, "Title",ExpressionUUID->"806dd0d5-2fdf-4ba2-bbd9-a7d596cf6bd9"],
Cell[108527, 2114, 128, 3, 30, "Input",ExpressionUUID->"54120acb-b5b5-4130-9af3-80f8f4584a8c"]
}, Open  ]]
}
]
*)

